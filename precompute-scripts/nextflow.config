params {
   singularity_cache_dir = getEnvValue("HOME", "/tmp") + "/.singularity_cache"
   cds_container = ''
   user_id = getUID()

   // to run using the local app jar
   // set app to '../neuron-search-tools/target/colormipsearch-3.1.0-jar-with-dependencies.jar'
   app = ''
   log_config = 'mylocal/log4j.properties'
   db_config = 'mylocal/devdb-config.properties'
   mips_base_dir = '/nrs/jacs/jacsData/filestore/groups/flylight/system'
   mips_base_link = '/nrs/jacs/jacsData/filestore/system'
   lsf_opts = '-P scicompsoft'
   runtime_opts = ''

   cpus = 60
   mem_gb = 400
   executor_queue_size = 10

   java_opts = ''

   anatomical_area = '' // brain, vnc, for MIP exports it can be brain+vnc

   tool_runner = '' // for debugging set this to echo

   first_job = 0
   last_job = 0
   job_list = ''

   // params common for all algorithms
   mirror_flag = true

   // Normalize GRAD scores
   normalize_score_processing_tag = ''
   normalize_score_batch_size = 10000

   // Tag
   data_version = '3.4.1'

   // Validate data
   validate_libs = ''
   validate_published_names = ''
   validate_mip_ids = ''

   jacs_read_batch_size = 2000
}

includeConfig 'conf/modules.config'

process {
   withLabel: neuronbridgeTools {
      ext.container = { params.cds_container }
   }

   withLabel: process_low {
      cpus = 1
      memory = '2GB'
   }
}

profiles {
   standard {
      docker.enabled = false
      singularity.enabled = false
      apptainer.enabled = false
      pod.enabled = false
      conda.enabled = true

      params {
         // use the local app jar
         app = '../neuron-search-tools/target/colormipsearch-3.1.1-alt-jar-with-dependencies.jar'
      }
   }

   localsingularity {
      docker.enabled = false
      pod.enabled = false
      singularity.enabled = true

      params {
         // use the local app jar
         app = '../neuron-search-tools/target/colormipsearch-3.1.0-jar-with-dependencies.jar'
      }
   }

   localdocker {
      docker.enabled = true
      singularity.enabled = false
      apptainer.enabled = false
   }

   kubernetes {
      params {
         cpus = 30
         mem_gb = 200
         gradscore_concurrency = 30
         executor_queue_size = 8
         cds_container = 'ghcr.io/janeliascicomp/colormipsearch-tools:3.1.1-alt'
      }

      executor {
         queueSize = params.executor_queue_size
      }

      pod.enabled = true
      docker.enabled = false
      singularity.enabled = false

      process {
         executor = 'k8s'

         withName: "CDS|GA" {
            pod = [
               [hostPath: params.mips_base_dir,
                mountPath: params.mips_base_dir],
               [hostPath: params.mips_base_link,
                mountPath: params.mips_base_link],
            ]
         }

         withName: EXPORT {
            pod = [
               [hostPath: params.base_export_dir,
                mountPath: params.base_export_dir]
            ]
         }
      }

      wave {
         enabled = false
      }

      k8s {
         autoMountHostPaths = true
         computeResourceType = 'Job'
         cpuLimits = true
         httpConnectTimeout = '600s'
         httpReadTimeout = '600s'
         context = 'nfcontext'
         namespace = 'default'
         runAsUser = params.user_id
         pullPolicy = 'Always'
         debug.yaml = true
      }
   }

   lsf {
      params {
         cpus = 30
         mem_gb = 445
         gradscore_cache_size = 100000
         // use the local app jar
         cds_container = ''
         app = '../neuron-search-tools/target/colormipsearch-3.1.0-jar-with-dependencies.jar'
      }

      process {
         executor = 'lsf'
         clusterOptions = params.lsf_opts

         withLabel: prefer_local {
            executor = 'local'
         }
      }

      docker.enabled = false
      singularity.enabled = true
   }

}

singularity {
   autoMounts = true
   cacheDir = params.singularity_cache_dir
}

// Borrowed from nf-virontus/nextflow.config
// Try to get a system environment variable value with some key. If the key
// doesn't exist, then return a default value
def getEnvValue(envKey, defaultValue = null) {
    envMap = new HashMap(System.getenv())
    if (envMap.containsKey(envKey)) {
        envMap[envKey]
    } else {
        defaultValue
    }
}

def getUID() {
    def p = Runtime.getRuntime().exec('id -u')
    try (InputStreamReader pout = new InputStreamReader(p.inputStream)) {
        pout.readLine() as Integer
    }
}
